continue
File.extname('afhgafv')
File.extname('afhga;fv')
'html'.match(/\.\w+\.?/)[0].chomp('.')
'.html....'.match(/\.\w+\.?/)[0].chomp('.')
'.html....'.match(/\.\w+\.?/)[0]
'.html....'.match(/\.\w+\.?/)[0].chomp('.')
'.html....'.match(/\.\w+\.*/)[0].chomp('.')
'.html'.match(/\.\w+\.*/)[0].chomp('.')
'.html.erb'.match(/\.\w+\.*/)[0].chomp('.')
'.html.erb'.match(/\.\w+\.*/)[0]-'.'
'.html.erb'.match(/\.\w+\.*/)[0][0..-2]
'.html.erb'.match(/\.\w+\.*/)[0]
'.html.'.match(/\.\w+\.*/)[0]
'.html'.match(/\.\w+\.*/)[0]
'.html'.match(/\.w+\.*/)[0]
'.html'.match(/\.+\.*/)[0]
'.html'.match(/(?<=\.).+\.*/)[0]
'.html'.match(/(?<=\.).+\./)[0]
'.html.erb'.match(/(?<=\.).+\./)[0]
'.html.erb'.match(/(?<=\.).+/)[0]
req.path.match(/(?<=\.).+/)[0]
MIME::Types.type_for('.json')
MIME::Types.type_for('.html')
MIME::Types.type_for('.html.erb')
MIME::Types.type_for('.html.erb')[0]
MIME::Types.type_for('.erb')[0]
MIME::Types.type_for('.txt')[0][0]
MIME::Types.type_for('.txt')[0].to_s
MIME::Types.type_for('.txt')[0]
MIME::Types.type_for('.txt')
MIME::Types.type_for(.txt)
File.extname('hole.html.erb')
req.path.match(/(?<=\.).+/)[0]
req.path.match(/(?<=\/public\/).+/)[0]
req.path.match(/(?<=\/public\/).+/).first
req.path.match(/(?<=\/public\/).+/)
File.extname('public/hello.txt')
File.exist?("public/#{req.path.match(/(?<=\/public\/).+/)}")
req.path.match(/(?<=\/public\/).+/)
req.path.match(/(?<=\/public\//).+/)
req.path.match(/(?<=public).+/)
req.path.match(/(?<=WORD).+/)
req.path.match(/(?<=WORD)/)
req.path.match(?<=WORD)
File.exist?('public/hello.txt')
File.exist?('assets/hello.txt')
req.path.match(/\/public\/(?<file>[\w\.\/]+)/).names.zip(req.path.match(/\/public\/(?<file>[\w\.\/]+)/).captures).to_h['file']
req.path.match(/\/public\/(?<file>[\w\.\/]+)/).names.zip(req.path.match(/\/public\/(?<file>[\w\.\/]+)/).captures).to_h
req.path.match(/\/public\/(?<file>[\w\.\/]+)/).captures
req.path.match(/\/public\/(?<file>[\w\.\/]+)/).names
m = _
req.path.match(/\/public\/(?<file>[\w\.\/]+)/)
m = req.path.match(/\/public\/(?<file>[\w\.\/]+)/)
req.path.match(/\/public\/(?<file>[\w\.\/]+)/)
req.path.match(/\/assets\/(?<file>[\w\.\/]+)/)
req.path
File.exist?(req.path)
